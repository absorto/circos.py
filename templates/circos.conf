<<include etc/colors_fonts_patterns.conf>>
<<include etc/colors.conf>>


<ideogram>

<spacing>
default = 0.005r
break   = 0.05r
</spacing>
# Ideogram position, fill and outline
radius           = 0.90r
thickness        = 20p
fill             = yes
stroke_color     = dgrey
stroke_thickness = 2p

# Minimum definition for ideogram labels.

show_label       = yes
# see etc/fonts.conf for list of font names
label_font       = default 
label_radius     = 1.075r  # if ideogram radius is constant, and you'd like labels close to image edge, 
                           # use the dims() function to access the size of the image
                           # label_radius  = dims(image,radius) - 60p
label_size       = 30
label_parallel   = yes

{% if cytobands %}
show_bands = yes
fill_bands = yes
band_transparency = 4
{% endif %}

</ideogram>

{% if ticks %}
show_ticks          = yes
show_tick_labels    = yes

<ticks>
radius           = 1r
color            = black
thickness        = 2p

# the tick label is derived by multiplying the tick position
# by 'multiplier' and casting it in 'format':
#
# sprintf(format,position*multiplier)
#

multiplier       = 1e-6

# %d   - integer
# %f   - float
# %.1f - float with one decimal
# %.2f - float with two decimals
#
# for other formats, see http://perldoc.perl.org/functions/sprintf.html

format           = %d

<tick>
spacing        = 5u
size           = 10p
</tick>

<tick>
spacing        = 25u
size           = 15p
show_label     = yes
label_size     = 20p
label_offset   = 10p
format         = %d
</tick>

</ticks>
{% endif %}

<image>
<<include etc/image.conf>>
</image>

karyotype = {{ karyotype }}

{% if chromosomes %}
chromosomes_display_default = no
chromosomes = {{ chromosomes }}
{% endif %}

{% if links %}
<links>
radius = {{ links_radius }}
bezier_radius = {{ links_bezier_radius }}

{% for l in links %}
   <link {{ l.path }}>
   show         = yes
   thickness    = 1
   color        = {{ l.color }}
   file         = {{ l.path }}
   </link>
{% endfor %}

</links>
{% endif %}



{% if tracks %}
<plots>

{% for track in tracks %}
   <plot>
   type = {{ track.type }}
   file = {{ track.path }}
   r1   = {{ track.r1 }}
   r0   = {{ track.r0 }}
   orientation = {{ track.orientation }}
   fill_color = {{ track.color }}
   thickness = 0
   extend_bin = {{ track.extend_bin }} 
   </plot>
{% endfor %}

</plots>
{% endif %}


<<include etc/housekeeping.conf>>
